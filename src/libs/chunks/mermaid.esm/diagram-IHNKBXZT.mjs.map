{
  "version": 3,
  "sources": ["../../../src/diagrams/testslides/db.ts", "../../../src/diagrams/testslides/parser.ts", "../../../src/diagrams/testslides/renderer.ts", "../../../src/diagrams/testslides/styles.ts", "../../../src/diagrams/testslides/diagram.ts"],
  "sourcesContent": ["import { getConfig as commonGetConfig } from '../../config.js';\nimport type { ArrayDiagramConfig } from '../../config.type.js';\nimport DEFAULT_CONFIG from '../../defaultConfig.js';\nimport { cleanAndMerge } from '../../utils.js';\nimport {\n  clear as commonClear,\n  getAccDescription,\n  getAccTitle,\n  getDiagramTitle,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle,\n} from '../common/commonDb.js';\nimport type { TestSlidesDB, TestSlidesData, ArraySlide } from './types.js';\n\nconst defaultTestSlidesData: TestSlidesData = {\n  slides: [],\n};\n\nlet data: TestSlidesData = structuredClone(defaultTestSlidesData);\n\nconst DEFAULT_ARRAY_CONFIG: Required<ArrayDiagramConfig> = DEFAULT_CONFIG.array;\n\nconst getConfig = (): Required<ArrayDiagramConfig> => {\n  return cleanAndMerge({\n    ...DEFAULT_ARRAY_CONFIG,\n    ...commonGetConfig().array,\n  });\n};\n\nconst getSlides = (): ArraySlide[] => data.slides;\n\nconst addSlide = (slide: ArraySlide) => {\n  data.slides.push(slide);\n};\n\nconst clear = () => {\n  commonClear();\n  data = structuredClone(defaultTestSlidesData);\n};\n\nexport const db: TestSlidesDB = {\n  addSlide,\n  getSlides,\n  getConfig,\n  clear,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n};\n", "import type { TestSlidesDiagram } from '@mermaid-js/parser';\nimport { parse } from '@mermaid-js/parser';\nimport type { ParserDefinition } from '../../diagram-api/types.js';\nimport { log } from '../../logger.js';\nimport { db } from './db.js';\nimport { populateCommonDb } from '../common/populateCommonDb.js';\nimport type { ArraySlide, ArrayElement as LocalArrayElement } from './types.js';\n\nconst populate = (ast: TestSlidesDiagram) => {\n  populateCommonDb(ast, db); // Ensure common properties are populated\n  for (const slide of ast.pages) {\n    const elements: LocalArrayElement[] = slide.elements.map((e) => ({\n      value: e.value,\n      arrow: e.arrow === 'arrow',\n      context: e.context,\n      color: e.color,\n    }));\n    db.addSlide({ showIndex: !!slide.showIndex, elements });\n  }\n};\n\nexport const parser: ParserDefinition = {\n  parse: async (input: string): Promise<void> => {\n    // cspell:ignore testslides\n    const ast: TestSlidesDiagram = await parse('testslides', input);\n    log.debug(ast);\n    populate(ast);\n  },\n};\n", "// import * as d3 from 'd3';\n// import type { Diagram } from '../../Diagram.js';\n// import type { ArrayDiagramConfig } from '../../config.type.js';\n// import type { DiagramRenderer, DrawDefinition, Group, SVG } from '../../diagram-api/types.js';\n// import { selectSvgElement } from '../../rendering-util/selectSvgElement.js';\n// import { configureSvgSize } from '../../setupGraphViewbox.js';\n// import type { TestSlidesDB, ArraySlide, ArrayElement } from './types.js';\n\n// const draw: DrawDefinition = (_text, id, _version, diagram: Diagram) => {\n//   const db = diagram.db as TestSlidesDB;\n//   const config = db.getConfig();\n//   const slides = db.getSlides();\n//   const title = db.getDiagramTitle();\n//   const svgHeight = 800;\n//   const svgWidth = 600;\n//   const svg: SVG = selectSvgElement(id);\n\n//   let currentPage = 0;\n\n//   const renderPage = (pageIndex: number) => {\n//     svg.selectAll('g.page').attr('style', 'display: none');\n//     svg.select(`#page${pageIndex}`).attr('style', 'display: inline');\n\n//     // Update button states\n//     svg.select('#prevButton').attr('fill', pageIndex > 0 ? '#007bff' : '#c0c0c0');\n//     svg.select('#nextButton').attr('fill', pageIndex < slides.length - 1 ? '#007bff' : '#c0c0c0');\n//   };\n\n//   const addNavigationButtons = (svg: SVG, totalPages: number) => {\n//     const buttonGroup = svg.append('g')\n//       .attr('class', 'navigation-buttons');\n\n//     // Prev button\n//     const prevButtonGroup = buttonGroup.append('g')\n//       .attr('id', 'prevButtonGroup')\n//       .attr('cursor', 'pointer');\n\n//     prevButtonGroup.append('rect')\n//       .attr('id', 'prevButton')\n//       .attr('x', svgWidth / 2 - 80)\n//       .attr('y', 450)\n//       .attr('width', 60)\n//       .attr('height', 30)\n//       .attr('fill', '#c0c0c0'); // Initially disabled\n\n//     prevButtonGroup.append('text')\n//       .text('Prev')\n//       .attr('x', svgWidth / 2 - 50)\n//       .attr('y', 470)\n//       .attr('fill', 'white')\n//       .attr('text-anchor', 'middle')\n//       .attr('alignment-baseline', 'middle');\n\n//     // Next button\n//     const nextButtonGroup = buttonGroup.append('g')\n//       .attr('id', 'nextButtonGroup')\n//       .attr('cursor', 'pointer');\n\n//     nextButtonGroup.append('rect')\n//       .attr('id', 'nextButton')\n//       .attr('x', svgWidth / 2 + 20)\n//       .attr('y', 450)\n//       .attr('width', 60)\n//       .attr('height', 30)\n//       .attr('fill', '#007bff'); // Initially enabled\n\n//     nextButtonGroup.append('text')\n//       .text('Next')\n//       .attr('x', svgWidth / 2 + 50)\n//       .attr('y', 470)\n//       .attr('fill', 'white')\n//       .attr('text-anchor', 'middle')\n//       .attr('alignment-baseline', 'middle');\n//   };\n\n//   const drawSlide = (svg: SVG, slide: ArraySlide, pageIndex: number) => {\n//     const pageGroup = svg.append('g')\n//       .attr('id', `page${pageIndex}`)\n//       .attr('class', 'page')\n//       .attr('style', pageIndex === 0 ? 'display: inline' : 'display: none');\n\n//     if (title) {\n//       pageGroup\n//         .append('text')\n//         .text(title)\n//         .attr('x', svgWidth / 2)\n//         .attr('y', 25)\n//         .attr('dominant-baseline', 'middle')\n//         .attr('text-anchor', 'middle')\n//         .attr('class', 'arrayTitle');\n//     }\n\n//     for (const [index, element] of slide.elements.entries()) {\n//       drawElement(pageGroup as unknown as SVG, element, index, config, slide.showIndex);\n//     }\n//   };\n\n//   svg.attr('viewBox', `0 0 ${svgWidth} ${svgHeight}`);\n//   configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n\n//   defineArrowhead(svg);\n\n//   slides.forEach((slide, index) => {\n//     drawSlide(svg, slide, index);\n//   });\n\n//   addNavigationButtons(svg, slides.length);\n\n//   renderPage(currentPage);\n\n//   // Inject page-switching logic as inline JavaScript\n//   const switchPageScript = `\n//     (function() {\n//       const svg = document.getElementById('${id}');\n//       let currentPage = 0;\n//       const totalPages = ${slides.length};\n\n//       function renderPage(pageIndex) {\n//         const pages = svg.querySelectorAll('g.page');\n//         pages.forEach(page => {\n//           page.style.display = 'none';\n//         });\n//         svg.querySelector('#page' + pageIndex).style.display = 'inline';\n\n//         const prevButton = svg.querySelector('#prevButton');\n//         const nextButton = svg.querySelector('#nextButton');\n\n//         if (prevButton) prevButton.setAttribute('fill', pageIndex > 0 ? '#007bff' : '#c0c0c0');\n//         if (nextButton) nextButton.setAttribute('fill', pageIndex < totalPages - 1 ? '#007bff' : '#c0c0c0');\n//       }\n\n//       svg.querySelector('#prevButtonGroup').addEventListener('click', function() {\n//         if (currentPage > 0) {\n//           currentPage -= 1;\n//           renderPage(currentPage);\n//         }\n//       });\n\n//       svg.querySelector('#nextButtonGroup').addEventListener('click', function() {\n//         if (currentPage < totalPages - 1) {\n//           currentPage += 1;\n//           renderPage(currentPage);\n//         }\n//       });\n\n//       renderPage(currentPage);\n//     })();\n//   `;\n\n//   // Append the script element to the SVG\n//   svg.append('script').attr('type', 'text/javascript').text(switchPageScript);\n// };\n\n// const getColor = (color?: string): string => {\n//   switch (color) {\n//     case 'blue':\n//       return 'rgba(0, 0, 255, 0.3)'; // Semi-transparent blue\n//     case 'green':\n//       return 'rgba(0, 255, 0, 0.3)'; // Semi-transparent green\n//     case 'red':\n//       return 'rgba(255, 0, 0, 0.3)'; // Semi-transparent red\n//     default:\n//       return 'none';\n//   }\n// };\n\n// const drawElement = (\n//   svg: SVG,\n//   element: ArrayElement,\n//   index: number,\n//   {\n//     elementColor,\n//     borderColor,\n//     borderWidth,\n//     labelColor,\n//     labelFontSize,\n//   }: Required<ArrayDiagramConfig>,\n//   showIndex: boolean\n// ) => {\n//   const group: Group = svg.append('g');\n//   const elementX = index * 50 + 50; // Adjust the x coordinate based on the index\n//   const elementY = 100; // Increased the y coordinate to provide more space above\n\n//   const fillColor = getColor(element.color);\n\n//   if (element.arrow) {\n//     // Draw arrow\n//     const arrowYStart = elementY - 40; // Position the arrow head higher\n//     const arrowYEnd = elementY - 10;   // Position the end of the arrow at the top edge of the square\n//     group\n//       .append('line')\n//       .attr('x1', elementX + 20)\n//       .attr('y1', arrowYStart)\n//       .attr('x2', elementX + 20)\n//       .attr('y2', arrowYEnd)\n//       .attr('stroke', 'black')\n//       .attr('marker-end', 'url(#arrowhead)');\n\n//     // Draw arrow context if it exists\n//     if (element.context) {\n//       group\n//         .append('text')\n//         .attr('x', elementX + 20)\n//         .attr('y', arrowYStart - 10) // Position it slightly above the arrow start\n//         .attr('fill', labelColor)\n//         .attr('font-size', labelFontSize)\n//         .attr('dominant-baseline', 'hanging') // Changed to hanging to avoid cut-off\n//         .attr('text-anchor', 'middle')\n//         .attr('class', 'arrowContext')\n//         .text(element.context);\n//     }\n//   }\n\n//   group\n//     .append('rect')\n//     .attr('x', elementX)\n//     .attr('y', elementY)\n//     .attr('width', 40)\n//     .attr('height', 40)\n//     .style('fill', fillColor)\n//     .attr('stroke', borderColor)\n//     .attr('stroke-width', borderWidth)\n//     .attr('class', 'arrayElement');\n\n//   group\n//     .append('text')\n//     .attr('x', elementX + 20)\n//     .attr('y', elementY + 20)\n//     .attr('fill', labelColor)\n//     .attr('font-size', labelFontSize)\n//     .attr('dominant-baseline', 'middle')\n//     .attr('text-anchor', 'middle')\n//     .attr('class', 'elementLabel')\n//     .text(element.value);\n\n//   if (showIndex) {\n//     group\n//       .append('text')\n//       .attr('x', elementX + 20)\n//       .attr('y', elementY + 60) // Position below the rectangle\n//       .attr('fill', labelColor)\n//       .attr('font-size', 25) // Slightly smaller font for the index\n//       .attr('dominant-baseline', 'middle')\n//       .attr('text-anchor', 'middle')\n//       .attr('class', 'indexLabel')\n//       .text(index);\n//   }\n// };\n\n// // Define arrowhead marker\n// const defineArrowhead = (svg: SVG) => {\n//   svg.append('defs')\n//     .append('marker')\n//     .attr('id', 'arrowhead')\n//     .attr('viewBox', '0 0 10 10')\n//     .attr('refX', '5')\n//     .attr('refY', '5')\n//     .attr('markerWidth', '6')\n//     .attr('markerHeight', '6')\n//     .attr('orient', 'auto-start-reverse')\n//     .append('path')\n//     .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n//     .attr('fill', 'black');\n// };\n\n// export const renderer: DiagramRenderer = { draw };\n\nimport * as d3 from 'd3';\nimport type { Diagram } from '../../Diagram.js';\nimport type { ArrayDiagramConfig } from '../../config.type.js';\nimport type { DiagramRenderer, DrawDefinition, Group, SVG } from '../../diagram-api/types.js';\nimport { selectSvgElement } from '../../rendering-util/selectSvgElement.js';\nimport { configureSvgSize } from '../../setupGraphViewbox.js';\nimport type { TestSlidesDB, ArraySlide, ArrayElement } from './types.js';\n\nconst draw: DrawDefinition = (_text, id, _version, diagram: Diagram) => {\n  const db = diagram.db as TestSlidesDB;\n  const config = db.getConfig();\n  const slides = db.getSlides();\n  const title = db.getDiagramTitle();\n  const svgHeight = 500;\n  const svgWidth = 600;\n  const svg: SVG = selectSvgElement(id);\n\n  const currentPage = 0;\n  const playInterval: number | null = null;\n\n  const renderPage = (pageIndex: number) => {\n    svg.selectAll('g.page').attr('style', 'display: none');\n    svg.select(`#page${pageIndex}`).attr('style', 'display: inline');\n\n    // Update button states\n    svg.select('#prevButton').attr('fill', pageIndex > 0 ? '#007bff' : '#c0c0c0');\n    svg.select('#nextButton').attr('fill', pageIndex < slides.length - 1 ? '#007bff' : '#c0c0c0');\n\n    // Update current page display\n    svg.select('#pageIndicator').text(`${pageIndex + 1} / ${slides.length}`);\n  };\n\n  const addNavigationButtons = (svg: SVG, totalPages: number) => {\n    const buttonGroup = svg.append('g').attr('class', 'navigation-buttons');\n\n    // Prev button\n    const prevButtonGroup = buttonGroup\n      .append('g')\n      .attr('id', 'prevButtonGroup')\n      .attr('cursor', 'pointer');\n\n    prevButtonGroup\n      .append('rect')\n      .attr('id', 'prevButton')\n      .attr('x', svgWidth / 2 - 120)\n      .attr('y', svgHeight - 50)\n      .attr('width', 60)\n      .attr('height', 30)\n      .attr('fill', '#c0c0c0'); // Initially disabled\n\n    prevButtonGroup\n      .append('text')\n      .text('<')\n      .attr('x', svgWidth / 2 - 90)\n      .attr('y', svgHeight - 30)\n      .attr('fill', 'white')\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle');\n\n    // Next button\n    const nextButtonGroup = buttonGroup\n      .append('g')\n      .attr('id', 'nextButtonGroup')\n      .attr('cursor', 'pointer');\n\n    nextButtonGroup\n      .append('rect')\n      .attr('id', 'nextButton')\n      .attr('x', svgWidth / 2 + 60)\n      .attr('y', svgHeight - 50)\n      .attr('width', 60)\n      .attr('height', 30)\n      .attr('fill', '#007bff'); // Initially enabled\n\n    nextButtonGroup\n      .append('text')\n      .text('>')\n      .attr('x', svgWidth / 2 + 90)\n      .attr('y', svgHeight - 30)\n      .attr('fill', 'white')\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle');\n\n    // Play button\n    const playButtonGroup = buttonGroup\n      .append('g')\n      .attr('id', 'playButtonGroup')\n      .attr('cursor', 'pointer');\n\n    playButtonGroup\n      .append('rect')\n      .attr('id', 'playButton')\n      .attr('x', svgWidth / 2 - 30)\n      .attr('y', svgHeight - 50)\n      .attr('width', 60)\n      .attr('height', 30)\n      .attr('fill', '#007bff'); // Initially enabled\n\n    playButtonGroup\n      .append('text')\n      .text('\u25B6')\n      .attr('x', svgWidth / 2)\n      .attr('y', svgHeight - 30)\n      .attr('fill', 'white')\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle');\n\n    // Page indicator\n    buttonGroup\n      .append('text')\n      .attr('id', 'pageIndicator')\n      .attr('x', svgWidth - 50)\n      .attr('y', svgHeight - 30)\n      .attr('fill', 'black')\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle')\n      .text(`1 / ${totalPages}`);\n  };\n\n  const drawSlide = (svg: SVG, slide: ArraySlide, pageIndex: number) => {\n    const pageGroup = svg\n      .append('g')\n      .attr('id', `page${pageIndex}`)\n      .attr('class', 'page')\n      .attr('style', pageIndex === 0 ? 'display: inline' : 'display: none');\n\n    if (title) {\n      pageGroup\n        .append('text')\n        .text(title)\n        .attr('x', svgWidth / 2)\n        .attr('y', 25)\n        .attr('dominant-baseline', 'middle')\n        .attr('text-anchor', 'middle')\n        .attr('class', 'arrayTitle');\n    }\n\n    for (const [index, element] of slide.elements.entries()) {\n      drawElement(pageGroup as unknown as SVG, element, index, config, slide.showIndex);\n    }\n  };\n\n  svg.attr('viewBox', `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n\n  defineArrowhead(svg);\n\n  slides.forEach((slide, index) => {\n    drawSlide(svg, slide, index);\n  });\n\n  addNavigationButtons(svg, slides.length);\n\n  renderPage(currentPage);\n\n  // Inject page-switching logic directly into the SVG as JavaScript\n  const switchPageScript = `\n    const svg = document.getElementById('${id}');\n    let currentPage = 0;\n    const totalPages = ${slides.length};\n    let playInterval = null;\n\n    function renderPage(pageIndex) {\n      const pages = svg.querySelectorAll('g.page');\n      pages.forEach(page => {\n        page.style.display = 'none';\n      });\n      svg.querySelector('#page' + pageIndex).style.display = 'inline';\n\n      const prevButton = svg.querySelector('#prevButton');\n      const nextButton = svg.querySelector('#nextButton');\n      \n      if (prevButton) prevButton.setAttribute('fill', pageIndex > 0 ? '#007bff' : '#c0c0c0');\n      if (nextButton) nextButton.setAttribute('fill', pageIndex < totalPages - 1 ? '#007bff' : '#c0c0c0');\n\n      // Update current page display\n      svg.querySelector('#pageIndicator').textContent = (pageIndex + 1) + ' / ' + totalPages;\n    }\n\n    svg.querySelector('#prevButtonGroup').addEventListener('click', function() {\n      if (currentPage > 0) {\n        currentPage -= 1;\n        renderPage(currentPage);\n      }\n    });\n\n    svg.querySelector('#nextButtonGroup').addEventListener('click', function() {\n      if (currentPage < totalPages - 1) {\n        currentPage += 1;\n        renderPage(currentPage);\n      }\n    });\n\n    svg.querySelector('#playButtonGroup').addEventListener('click', function() {\n      if (playInterval) {\n        clearInterval(playInterval);\n        playInterval = null;\n        svg.querySelector('#playButton').setAttribute('fill', '#007bff');\n        svg.querySelector('#playButton text').textContent = '\u25B6';\n      } else {\n        playInterval = setInterval(() => {\n          if (currentPage < totalPages - 1) {\n            currentPage += 1;\n          } else {\n            currentPage = 0;\n          }\n          renderPage(currentPage);\n        }, 1000);\n        svg.querySelector('#playButton').setAttribute('fill', '#c0c0c0');\n        svg.querySelector('#playButton text').textContent = '\u275A\u275A';\n      }\n    });\n\n    renderPage(currentPage);\n  `;\n\n  // Append the script element to the SVG\n  svg.append('script').attr('type', 'text/ecmascript').text(switchPageScript);\n};\n\nconst getColor = (color?: string): string => {\n  switch (color) {\n    case 'blue':\n      return 'rgba(0, 0, 255, 0.3)'; // Semi-transparent blue\n    case 'green':\n      return 'rgba(0, 255, 0, 0.3)'; // Semi-transparent green\n    case 'red':\n      return 'rgba(255, 0, 0, 0.3)'; // Semi-transparent red\n    default:\n      return 'none';\n  }\n};\n\nconst drawElement = (\n  svg: SVG,\n  element: ArrayElement,\n  index: number,\n  {\n    elementColor,\n    borderColor,\n    borderWidth,\n    labelColor,\n    labelFontSize,\n  }: Required<ArrayDiagramConfig>,\n  showIndex: boolean\n) => {\n  const group: Group = svg.append('g');\n  const elementX = index * 50 + 50; // Adjust the x coordinate based on the index\n  const elementY = 100; // Increased the y coordinate to provide more space above\n\n  const fillColor = getColor(element.color);\n\n  if (element.arrow) {\n    // Draw arrow\n    const arrowYStart = elementY - 40; // Position the arrow head higher\n    const arrowYEnd = elementY - 10; // Position the end of the arrow at the top edge of the square\n    group\n      .append('line')\n      .attr('x1', elementX + 20)\n      .attr('y1', arrowYStart)\n      .attr('x2', elementX + 20)\n      .attr('y2', arrowYEnd)\n      .attr('stroke', 'black')\n      .attr('marker-end', 'url(#arrowhead)');\n\n    // Draw arrow context if it exists\n    if (element.context) {\n      group\n        .append('text')\n        .attr('x', elementX + 20)\n        .attr('y', arrowYStart - 10) // Position it slightly above the arrow start\n        .attr('fill', labelColor)\n        .attr('font-size', labelFontSize)\n        .attr('dominant-baseline', 'hanging') // Changed to hanging to avoid cut-off\n        .attr('text-anchor', 'middle')\n        .attr('class', 'arrowContext')\n        .text(element.context);\n    }\n  }\n\n  group\n    .append('rect')\n    .attr('x', elementX)\n    .attr('y', elementY)\n    .attr('width', 40)\n    .attr('height', 40)\n    .style('fill', fillColor)\n    .attr('stroke', borderColor)\n    .attr('stroke-width', borderWidth)\n    .attr('class', 'arrayElement');\n\n  group\n    .append('text')\n    .attr('x', elementX + 20)\n    .attr('y', elementY + 20)\n    .attr('fill', labelColor)\n    .attr('font-size', labelFontSize)\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', 'middle')\n    .attr('class', 'elementLabel')\n    .text(element.value);\n\n  if (showIndex) {\n    group\n      .append('text')\n      .attr('x', elementX + 20)\n      .attr('y', elementY + 60) // Position below the rectangle\n      .attr('fill', labelColor)\n      .attr('font-size', 25) // Slightly smaller font for the index\n      .attr('dominant-baseline', 'middle')\n      .attr('text-anchor', 'middle')\n      .attr('class', 'indexLabel')\n      .text(index);\n  }\n};\n\n// Define arrowhead marker\nconst defineArrowhead = (svg: SVG) => {\n  svg\n    .append('defs')\n    .append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', '5')\n    .attr('refY', '5')\n    .attr('markerWidth', '6')\n    .attr('markerHeight', '6')\n    .attr('orient', 'auto-start-reverse')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n    .attr('fill', 'black');\n};\n\nexport const renderer: DiagramRenderer = { draw };\n", "import { log } from '../../logger.js';\n\nexport const styles = (options: any = {}) => {\n  log.debug({ options });\n  return `\n    .element {\n      font-size: ${options.array?.elementFontSize ?? '10px'};\n      fill: ${options.array?.valueColor ?? 'black'};\n    }\n    .element.index {\n      fill: ${options.array?.indexColor ?? 'black'};\n    }\n    .element {\n      stroke: ${options.array?.elementStrokeColor ?? 'black'};\n      stroke-width: ${options.array?.elementStrokeWidth ?? '1'};\n      fill: ${options.array?.elementFillColor ?? '#efefef'};\n    }\n  `;\n};\n\nexport default styles;\n", "import type { DiagramDefinition } from '../../diagram-api/types.js';\nimport { db } from './db.js';\nimport { parser } from './parser.js';\nimport { renderer } from './renderer.js';\nimport { styles } from './styles.js';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n};\n"],
  "mappings": "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",
  "names": ["getConfig", "clear", "diagram", "db", "svg"]
}
